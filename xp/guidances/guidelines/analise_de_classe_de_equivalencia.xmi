<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-c7t_eJuo1g5hpWTYTCItig" name="equivalence_class_analysis,1.8491691792142673E-308" guid="-c7t_eJuo1g5hpWTYTCItig" changeDate="2009-02-26T22:31:47.203-0300" version="7.2.0">
  <mainDescription>&lt;a id=&quot;XE_runtime_observation_amp;_analysis__concept&quot; name=&quot;XE_runtime_observation_&amp;amp;_analysis__concept&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introdução&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Exceto para as mais triviais aplicações de software, normalmente é considerado impossível testar todas as combinações&#xD;
    de entradas logicamente viáveis para um sistema de software. Por conseguinte, a seleção de um bom subconjunto que tenha&#xD;
    a maior probabilidade de encontrar a maioria dos erros, é uma tarefa importante e útil para os testadores executarem.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Os testes baseados na análise de classes de equivalência (sinônimos: &lt;i>decomposição de equivalência&lt;/i>, &lt;i>análise de&#xD;
    domínio&lt;/i>) são uma forma de análise de teste de caixa-escura que tenta reduzir a quantidade total de testes&#xD;
    potenciais a um conjunto mínimo que irá descobrir a maioria dos erros possíveis &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../xp/customcategories/referencias_7226794B.html#MYE79&quot; guid=&quot;_mtcqtmE-EdqnIZeW8YpHcA&quot;>[MYE79]&lt;/a>.&#xD;
    Trata-se de um método que decompõe o conjunto de entradas e saídas em uma quantidade finita de &lt;i>Classes de&#xD;
    Equivalência&lt;/i>, que permitem a escolha de um valor de teste representativo para cada classe. O teste que resulta do&#xD;
    valor representativo para uma classe é chamado de &quot;equivalente&quot; para os outros valores na mesma classe. Se nenhum erro&#xD;
    for encontrado no teste de valor representativo, conclui-se que todos os outros valores &quot;equivalentes&quot; também não&#xD;
    identificarão nenhum erro.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    O poder das Classes de Equivalência reside na sua capacidade de orientar o testador a usar de uma estratégia de&#xD;
    amostragem para reduzir a explosão combinatória dos testes potencialmente necessários. A técnica fornece uma base&#xD;
    lógica através da qual um subconjunto do total concebível de testes possa ser selecionado. Aqui estão algumas&#xD;
    categorias de áreas problemáticas para uma grande gama de testes que podem se beneficiar da consideração das classes de&#xD;
    equivalência:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Combinação de variáveis independentes&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Variáveis dependentes baseadas em relacionamentos hierárquicos&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Variáveis dependentes baseadas em relacionamentos temporais&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Relacionamentos agregados baseados em exemplares de mercado&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Relacionamentos complexos que podem ser modelados&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Strategies&quot; name=&quot;Strategies&quot;>Estratégias&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Existem diferentes estratégias e técnicas que podem ser usadas nos testes de decomposição por equivalência. Aqui estão&#xD;
    alguns exemplos:&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;EquivalenceClassPartition&quot; name=&quot;EquivalenceClassPartition&quot;>Decomposição de Classe de Equivalência&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A teoria da decomposição de equivalência como proposto por Glenford Myers &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../xp/customcategories/referencias_7226794B.html&quot; guid=&quot;_mtcqtmE-EdqnIZeW8YpHcA&quot;>[MYE79]&lt;/a>. Tenta&#xD;
    reduzir a quantidade total de casos de teste necessários pela decomposição das condições de entrada em uma quantidade&#xD;
    finita de classes de equivalência. Dois tipos de classe de equivalência estão classificados: o conjunto de entradas&#xD;
    válidas para o programa é considerado como &lt;i>classe de equivalência válida&lt;/i>, e todas as outras entradas são&#xD;
    incluídas na &lt;i>classe de equivalência inválida&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Aqui esta um conjunto de diretrizes para identificar classes de equivalência:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Se uma condição de entrada especifica um conjunto de valores (tal como, o programa &quot;aceita valores entre 10 e&#xD;
        100&quot;), então uma classe de equivalência válida (entre 10 e 100) e duas classes de equivalência inválidas (inferior&#xD;
        a 10 e superior a 100) são identificadas.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Se uma condição de entrada especifica um conjunto de valores (tais como, &quot;o pano pode ser de várias cores:&#xD;
        VERMELHO, BRANCO, PRETO, VERDE e MARROM&quot;), então uma classe de equivalência válida (os valores válidos) e uma&#xD;
        classe de equivalência inválida (todos os outros valores inválidos) são identificadas. Cada valor de classe de&#xD;
        equivalência válida deve ser tratado distintamente.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Se a condição de entrada for especificada como uma situação &quot;dever ser&quot; (tal como, &quot;o texto de entrada deve estar&#xD;
        em caixa alta&quot;), então uma classe de equivalência válida (caracteres maiúsculos) e uma classe de equivalência&#xD;
        inválida (todas as outras entradas, exceto caracteres maiúsculos) são identificadas.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Tudo que acabou &quot;com longa duração&quot; antes da tarefa ser feita é uma classe de equivalência. Tudo que foi feito em&#xD;
        um curto intervalo de tempo antes do programa terminar é outra classe. Tudo que foi feito exatamente antes do&#xD;
        programa começar outra operação é outra classe.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Se for especificado que um programa deve trabalhar com tamanho de memória entre 64M e 256M. Então esta dimensão de&#xD;
        tamanho é uma classe de equivalência. Qualquer outro tamanho de memória, que seja maior que 256M ou menor que 64M,&#xD;
        não pode ser aceito.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A decomposição do evento de saída depende das entradas do programa. Mesmo que diferentes classes de equivalência de&#xD;
        entrada possam ter o mesmo tipo do evento de saída, você deverá tratar distintamente as classes de equivalência de&#xD;
        entrada.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;BoundaryValueAnalysis&quot; name=&quot;BoundaryValueAnalysis&quot;>Análise de Valor Limítrofe&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Em cada uma das classes de equivalência, considera-se que as condições limítrofes tenham uma maior taxa de sucesso na&#xD;
    identificação de resultados com falhas do que as condições não limítrofes. As condições limítrofes são os valores,&#xD;
    imediatamente acima ou abaixo dos limites de cada classe de equivalência.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Os testes que resultam das condições limítrofes fazem uso dos valores, mínimo (min), logo acima do mínimo (min+), logo&#xD;
    abaixo do máximo (max-), e máximo (max) do intervalo que precisa ser testado. Ao testar valores limítrofes, os&#xD;
    testadores escolhem alguns casos de teste para cada classe de equivalência. Para a amostra de testes relativamente&#xD;
    pequena, a probabilidade de descoberta de falha é elevada. É dado ao testador algum alívio no ônus de testar uma enorme&#xD;
    quantidade de casos em uma classe de equivalência de valores que não são susceptíveis de produzir grandes diferenças&#xD;
    nos resultados dos testes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Algumas recomendações ao escolher valores limítrofes:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Para uma variável de ponto flutuante, se a sua condição válida for entre &lt;code>-1,0&lt;/code> e &lt;code>1,0&lt;/code>,&#xD;
        teste &lt;code>-1,0&lt;/code>, &lt;code>1,0&lt;/code>, &lt;code>-1,001&lt;/code> e &lt;code>1,001&lt;/code>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Para um inteiro, se a gama de entrada válida for entre &lt;code>10&lt;/code> e &lt;code>100&lt;/code>, teste &lt;code>9&lt;/code>,&#xD;
        &lt;code>10&lt;/code>, &lt;code>100&lt;/code> e &lt;code>101&lt;/code>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Se um programa espera uma letra maiúscula, teste os limites A e Z. Teste &lt;code>@&lt;/code> e &lt;code>[&lt;/code> também,&#xD;
        porque no código ASCII, &lt;code>@&lt;/code> está logo abaixo de A e &lt;code>[&lt;/code> está logo depois de Z.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Se a entrada ou saída de um programa é um conjunto ordenado, preste atenção no primeiro e no último elemento do&#xD;
        conjunto.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Se a soma das entradas tiver que ser um número específico (&lt;code>n&lt;/code>), teste o programa onde a soma seja&#xD;
        &lt;code>n-1&lt;/code>, &lt;code>n&lt;/code> e &lt;code>n+1&lt;/code>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Se o programa aceita uma lista, teste os valores da lista. Todos os outros valores são inválidos.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ao ler ou escrever em um arquivo, verifique o primeiro e o último caractere do arquivo.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        O menor valor nominal do dinheiro é um centavo ou o equivalente. Se o programa aceita um determinado intervalo,&#xD;
        entre a e b, teste a &lt;code>-0,01&lt;/code> e b &lt;code>+0,01&lt;/code>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Para uma variável com vários conjuntos de valores, cada conjunto de valores é uma classe de equivalência. Se os&#xD;
        subintervalos não estiverem sobrepostos, teste os valores dos limites, logo acima do limite superior e logo abaixo&#xD;
        do limite inferior.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;SpecialValues&quot; name=&quot;SpecialValues&quot;>Valores Especiais&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Após a tentativa das duas últimas estratégias de análise de valor limítrofe, um testador experiente irá observar as&#xD;
    entradas do programa para descobrir qualquer caso de &quot;valor especial&quot;, que possa ser outra fonte potencialmente rica&#xD;
    para descobrir falhas do software. Aqui estão alguns exemplos:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Para um tipo inteiro, o zero deve sempre ser testado se está na classe de equivalência válida.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ao testar tempo (hora, minuto e segundo), 59 e 0 devem sempre ser testados como limites superior e inferior para&#xD;
        cada campo, independente das restrições das variáveis de entrada. Sendo assim, com exceção dos valores de limite de&#xD;
        entrada, -1, 0, 59 e 60 devem ser sempre casos de teste.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ao testar datas (ano, mês e dia), vários casos de teste, tais como a quantidade de dias em um determinado mês, a&#xD;
        quantidade de dias do mês de fevereiro em ano bissexto, a quantidade de dias em ano não bissexto, devem ser&#xD;
        envolvidos.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;CategoryPartition&quot; name=&quot;CategoryPartition&quot;>Método de &quot;Decomposição de Categoria&quot;&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    &lt;a href=&quot;#OstrandBalcer&quot;>Ostrand e Balcer&lt;/a> [16] desenvolveram um método de decomposição que ajuda os testadores a&#xD;
    analisar a especificação do sistema, escrever scripts de teste, e gerenciá-los. Diferente das estratégias comuns que&#xD;
    normalmente focam no código, o seu método também se baseia nas informações de especificação e design.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    O principal benefício deste método é a sua capacidade de expor erros antes do código ser escrito porque a fonte de&#xD;
    entrada é a especificação e os resultados dos testes da análise da especificação. As falhas na especificação serão&#xD;
    descobertas cedo, muitas vezes, bem antes que elas sejam implementadas no código.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A estratégia para o método de &quot;decomposição de categoria&quot; é a seguinte:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Analise a especificação: decomponha a funcionalidade do sistema em unidades funcionais que possam ser testadas&#xD;
        independentemente, tanto pela especificação como pela implementação.&lt;br />&#xD;
        Então;&lt;br />&#xD;
        &lt;br />&#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                Identifique os parâmetros e as condições ambientais que irão influenciar na execução da função. Os&#xD;
                parâmetros são as entradas da unidade funcional. As condições ambientais são os estados do sistema, que&#xD;
                afetarão a execução da unidade funcional.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Identifique as características dos parâmetros e das condições ambientais.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Classifique as características em categorias, que afetarão o comportamento do sistema.&lt;br />&#xD;
                &lt;br />&#xD;
            &lt;/li>&#xD;
        &lt;/ol>As descrições de comportamento ambíguas, contraditórias e esquecidas serão descobertas nesta fase.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Decomponha as categorias em opções: As opções são as diferentes situações possíveis que podem ocorrer e não são&#xD;
        esperadas. Elas representam o mesmo tipo de informação em uma categoria.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Determine as relações entre as restrições das escolhas. As escolhas em diferentes categorias influenciam umas as&#xD;
        outras, que também têm uma influência na construção da suíte de testes. As restrições são adicionadas para eliminar&#xD;
        a contradição entre a escolha de diferentes parâmetros e ambientes.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Projete os casos de teste de acordo com as informações das categorias, escolhas e restrições. Se uma opção provocar&#xD;
        um erro, não a combine com outras opções para criar o caso de teste. Se uma opção puder ser &quot;adequadamente&quot; testada&#xD;
        por um único teste, ela também é a representante da escolha ou de um valor especial.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;FurtherReading&quot; name=&quot;FurtherReading&quot;>Outras Leituras e Referências&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Glenford J. Myers, The Art of Software Testing, John Wiley &amp;amp; Sons, Inc., New York, 1979.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        White L. J. and Cohen E. I., A domain strategy for computer program testing, IEEE Transaction on Software&#xD;
        Engineering, Vol. SE-6, No. 3, 1980.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Lori A. Clarke, Johnhette Hassell, and Debra J Richardson, A Close Look at Domain Testing, IEEE Transaction on&#xD;
        Software Engineering, 8-4, 1992.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Steven J. Zeil, Faten H. Afifi and Lee J. White, Detection of Linear Detection via Domain Testing, ACM Transaction&#xD;
        on Software Engineering and Methodology, 1-4, 1992.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        BingHiang Jeng, Elaine J. Weyuker, A Simplified Domain-Testing Strategy, ACM Transaction on Software Engineering&#xD;
        and Methodology, 3-3, 1994.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Paul C. Jorgensen, Software Testing - A Craftsman's Approach, CRC Press LLC, 1995.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Martin R. Woodward and Zuhoor A. Al-khanjari, Testability, fault, and the domain-to-range ratio: An eternal&#xD;
        triangle, ACM Press New York, NY, 2000.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Dick Hamlet, On subdomains: Testing, profiles, and components, SIGSOFT: ACM Special Interest Group on Software&#xD;
        Engineering, 71-16, 2000.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Cem Kaner, James Bach, and Bret Pettichord, Lessons learned in Software Testing, John Wiley &amp;amp; Sons, Inc., New&#xD;
        York, 2002.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Andy Podgurski and Charles Yang, Partition Testing, Stratified Sampling, and Cluster Analysis, SIGSOFT: ACM Special&#xD;
        Interest Group on Software Engineering, 18-5, 1993.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Debra J. Richardson and Lori A. Clarke, A partition analysis method to increase program reliability, SIGSOFT: ACM&#xD;
        Special Interest Group on Software Engineering, 1981.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Lori A. Clarke, Johnette Hassell, and Debra J Richardson, A system to generate test data and symbolically execute&#xD;
        programs, IEEE Transaction on Software Engineering, SE-2, 1976.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Boris Beizer, Black-Box Testing - Techniques for Functional testing of Software and System, John Wiley &amp;amp; Sons,&#xD;
        Inc., 1995.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Steven J. Zeil, Faten H. Afifi and Lee J. White, Testing for Liner Errors in Nonlinear computer programs, ACM&#xD;
        Transaction on Software Engineering and Methodology, 1-4, 1992.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        William E. Howden, Functional Program Testing, IEEE Transactions on Software Engineering, Vol. SE-6, No. 2, 1980.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a id=&quot;OstrandBalcer&quot; name=&quot;OstrandBalcer&quot;>Thomas J. Ostrand and Marc J. Balcer&lt;/a>, The Category-Partition method&#xD;
        for specifying and generating functional tests, Communications of ACM 31, 1988.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Cem Kaner, Jack Falk and Hung Quoc Nguyen, Testing Computer Software, John Wiley &amp;amp; Sons, Inc., 1999.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
